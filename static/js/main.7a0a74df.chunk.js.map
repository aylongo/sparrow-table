{"version":3,"sources":["Table/StyledBox.tsx","Table/contexts/tableRootProps.ts","Table/slots/TableCell.tsx","Table/cells/AutocompleteCell/AutocompleteCell.tsx","Table/cells/gridDefsByColType.ts","Table/cells/AutocompleteCell/gridDefs.ts","Table/hooks/use-errors.ts","Table/Table.tsx","components/Example/ColumnDefinition.ts","components/Example/ExampleTable.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledBox","styled","Box","_ref","theme","*::-webkit-scrollbar","width","height","*::-webkit-scrollbar-track","-webkit-box-shadow","*::-webkit-scrollbar-thumb","backgroundColor","borderRadius","& .MuiDataGrid-cell--editing","color","& .MuiInputBase-root","& .Mui-error","concat","palette","mode","error","main","direction","TableRootPropsContext","createContext","TableErrorTooltip","className","props","_objectWithoutProperties","React","createElement","Tooltip","Object","assign","classes","popper","_ref2","_defineProperty","tooltipClasses","tooltip","dark","contrastText","fontSize","TableCell","tableRootProps","useContext","cellError","getErrorsBy","rowId","field","title","open","Boolean","TransitionComponent","Zoom","PopperProps","disablePortal","sx","maxWidth","GridCell","AutocompleteCell","_ref$params","params","api","id","hasFocus","value","colDef","inputRef","useRef","useEnhancedEffect","current","focus","Autocomplete","autoFocus","fullWidth","options","noOptionsText","onChange","_event","setEditCellValue","renderInput","TextField","hiddenLabel","variant","placeholder","gridDefsByColTypes","autocomplete","renderEditCell","getErrorKey","splitErrorKey","errorKey","_errorKey$split","split","_errorKey$split2","_slicedToArray","Table","rows","columns","slots","slotProps","_useErrors","_useState","useState","Map","_useState2","errors","setErrors","addError","errorMessage","prevErrors","set","removeError","delete","clearRowErrors","forEach","_","console","log","l","toString","get","useErrors","parseColDefs","map","colType","validation","required","_objectSpread","type","renderHeader","headerName","getFormattedHeaderName","preProcessEditCellProps","validationResult","hasError","validateColumn","parsedColDefs","useMemo","Provider","DataGrid","onRowEditStop","reason","GridRowEditStopReasons","escapeKeyDown","editMode","pageSizeOptions","density","showColumnVerticalBorder","showCellVerticalBorder","hideFooterSelectedRowCount","localeText","heIL","components","MuiDataGrid","defaultProps","cell","flex","headerAlign","editable","align","description","valueGetter","row","firstName","lastName","getOptionValue","getOptionLabel","text","valueOptions","age","country","weight","isRolling","ExampleTable","Fragment","createTheme","primary","red","typography","fontFamily","join","fontWeightMedium","fontWeightRegular","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.7a0a74df.chunk.js","sourcesContent":["import { Box, styled } from \"@mui/material\";\r\n\r\nconst StyledBox = styled(Box)(({ theme }) => ({\r\n  \"*::-webkit-scrollbar\": {\r\n    width: \"0.5em\",\r\n    height: \"0.5em\"\r\n  },\r\n  \"*::-webkit-scrollbar-track\": {\r\n    \"-webkit-box-shadow\": \"inset 0 0 6px rgba(144, 144, 144, 0.25)\",\r\n  },\r\n  \"*::-webkit-scrollbar-thumb\": {\r\n    backgroundColor: \"rgba(150, 144, 144, 0.5)\",\r\n    borderRadius: 8\r\n  },\r\n  \"& .MuiDataGrid-cell--editing\": {\r\n    backgroundColor: \"rgb(255,215,115, 0.19)\",\r\n    color: \"#1a3e72\",\r\n    \"& .MuiInputBase-root\": {\r\n      height: \"100%\",\r\n    },\r\n  },\r\n  \"& .Mui-error\": {\r\n    backgroundColor: `rgb(204,0,0, ${theme.palette.mode === \"dark\" ? 0.2 : 0})`,\r\n    color: theme.palette.error.main,\r\n  },\r\n  direction: \"rtl\",\r\n}));\r\n\r\nexport default StyledBox;\r\n","import React, { createContext } from \"react\";\r\nimport { GridRowId } from \"@mui/x-data-grid\";\r\nimport { TableErrors } from \"../types\";\r\n\r\ntype TableRootPropsContextProps = {\r\n    errors: TableErrors;\r\n    getErrorsBy: (rowId: GridRowId, field: string) => string | undefined;\r\n} | null;\r\n\r\nexport const TableRootPropsContext = createContext<TableRootPropsContextProps>(\r\n  null\r\n);\r\n","import React, { useContext } from \"react\";\r\nimport { GridCell, GridCellProps } from \"@mui/x-data-grid\";\r\nimport {\r\n  Tooltip,\r\n  TooltipProps,\r\n  Zoom,\r\n  styled,\r\n  tooltipClasses,\r\n} from \"@mui/material\";\r\nimport { TableRootPropsContext } from \"../contexts\";\r\n\r\nconst TableErrorTooltip = styled(({ className, ...props }: TooltipProps) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: theme.palette.error.dark,\r\n    color: theme.palette.error.contrastText,\r\n    fontSize: \"0.7rem\",\r\n  },\r\n}));\r\n\r\nexport const TableCell = (props: GridCellProps) => {\r\n  const tableRootProps = useContext(TableRootPropsContext);\r\n\r\n  const cellError = tableRootProps\r\n    ? tableRootProps.getErrorsBy(props.rowId, props.field)\r\n    : \"\";\r\n\r\n  return (\r\n    <TableErrorTooltip\r\n      title={cellError}\r\n      open={Boolean(cellError)}\r\n      TransitionComponent={Zoom}\r\n      PopperProps={{ disablePortal: true }}\r\n      sx={{ maxWidth: props.width * 0.8 }}\r\n    >\r\n      <GridCell {...props} />\r\n    </TableErrorTooltip>\r\n  );\r\n};\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Autocomplete, TextField } from \"@mui/material\";\r\nimport useEnhancedEffect from \"@mui/material/utils/useEnhancedEffect\";\r\nimport { TableAutocompleteRenderEditCellParams } from \"./types\";\r\n\r\ninterface AutocompleteCellProps {\r\n  params: TableAutocompleteRenderEditCellParams;\r\n}\r\n\r\nconst AutocompleteCell = ({\r\n  params: { api, id, field, error, hasFocus, value, colDef },\r\n}: AutocompleteCellProps) => {\r\n  const inputRef = useRef<HTMLElement>();\r\n\r\n  useEnhancedEffect(() => {\r\n    if (hasFocus && inputRef.current) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [hasFocus]);\r\n\r\n  const handleChange = (\r\n    _event: React.SyntheticEvent<Element, Event>,\r\n    value: Object | null\r\n  ) => {\r\n    api.setEditCellValue({\r\n      id,\r\n      field,\r\n      value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      autoFocus\r\n      fullWidth\r\n      value={value}\r\n      options={colDef.options}\r\n      noOptionsText=\"אין תוצאות\"\r\n      onChange={handleChange}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          hiddenLabel\r\n          inputRef={inputRef}\r\n          variant=\"outlined\"\r\n          placeholder={colDef.placeholder}\r\n          error={error}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport const renderEditAutocompleteCell = (\r\n  params: TableAutocompleteRenderEditCellParams\r\n) => <AutocompleteCell params={params} />;\r\n","import { GridColTypeDef } from \"@mui/x-data-grid\";\r\nimport { TableNativeColTypes } from \"../types\";\r\nimport { AUTOCOMPLETE_GRID_DEFS } from \"./AutocompleteCell/gridDefs\";\r\n\r\nexport const gridDefsByColTypes: Record<TableNativeColTypes, GridColTypeDef | undefined> = {\r\n    autocomplete: AUTOCOMPLETE_GRID_DEFS\r\n};","import { GridColTypeDef } from \"@mui/x-data-grid\";\r\nimport { renderEditAutocompleteCell } from \"./AutocompleteCell\";\r\n\r\nexport const AUTOCOMPLETE_GRID_DEFS: GridColTypeDef = {\r\n    // @ts-ignore\r\n    renderEditCell: renderEditAutocompleteCell\r\n}","import { useState } from \"react\";\r\nimport { GridRowId } from \"@mui/x-data-grid\";\r\nimport { TableErrors } from \"../types\";\r\n\r\nconst getErrorKey = (rowId: GridRowId, field: string) => `${rowId}-${field}`;\r\n\r\nconst splitErrorKey = (errorKey: string) => {\r\n  const [rowId, field] = errorKey.split(\"-\");\r\n\r\n  return { rowId, field };\r\n};\r\n\r\nexport const useErrors = () => {\r\n  const [errors, setErrors] = useState<TableErrors>(new Map());\r\n\r\n  const addError = (rowId: GridRowId, field: string, errorMessage: string) => {\r\n    setErrors((prevErrors) => {\r\n      return prevErrors.set(getErrorKey(rowId, field), errorMessage);\r\n    });\r\n  };\r\n\r\n  const removeError = (rowId: GridRowId, field: string) => {\r\n    setErrors((prevErrors) => {\r\n      prevErrors.delete(getErrorKey(rowId, field));\r\n\r\n      return prevErrors;\r\n    });\r\n  };\r\n\r\n  const clearRowErrors = (rowId: GridRowId) => {\r\n    setErrors((prevErrors) => {\r\n      prevErrors.forEach((_, errorKey) => {\r\n        console.log({ l: splitErrorKey(errorKey), rowId });\r\n        splitErrorKey(errorKey).rowId === rowId.toString() &&\r\n          prevErrors.delete(errorKey);\r\n      });\r\n\r\n      return prevErrors;\r\n    });\r\n  };\r\n\r\n  const getErrorsBy = (rowId: GridRowId, field: string) =>\r\n    errors.get(getErrorKey(rowId, field));\r\n\r\n  return { errors, addError, removeError, clearRowErrors, getErrorsBy };\r\n};\r\n","import React, { useMemo } from \"react\";\r\nimport {\r\n  DataGrid,\r\n  DataGridProps,\r\n  GridColDef,\r\n  GridRowsProp,\r\n  GridPreProcessEditCellProps,\r\n  GridRowEditStopParams,\r\n  GridRowEditStopReasons,\r\n  heIL,\r\n} from \"@mui/x-data-grid\";\r\nimport StyledBox from \"./StyledBox\";\r\nimport { TableRootPropsContext } from \"./contexts\";\r\nimport { TableCell } from \"./slots\";\r\nimport { gridDefsByColTypes } from \"./cells/gridDefsByColType\";\r\nimport { useErrors } from \"./hooks\";\r\nimport { TableColDef, TableNativeColTypes, TableValidation } from \"./types\";\r\n\r\ninterface TableProps extends Omit<DataGridProps, \"rows\" | \"columns\"> {\r\n  rows: GridRowsProp;\r\n  columns: TableColDef[];\r\n  canUploadFromExcel?: boolean; // TODO\r\n}\r\n\r\nconst getGridDefsByColType = (colType: TableNativeColTypes) => {\r\n  return gridDefsByColTypes[colType];\r\n};\r\n\r\nconst getFormattedHeaderName = (headerName: string, required?: boolean) =>\r\n  required ? headerName.concat(\"*\") : headerName;\r\n\r\nconst Table = ({ rows, columns, slots, slotProps, ...props }: TableProps) => {\r\n  const {\r\n    errors,\r\n    addError,\r\n    removeError,\r\n    clearRowErrors,\r\n    getErrorsBy,\r\n  } = useErrors();\r\n\r\n  const validateColumn = (\r\n    validation: TableValidation | undefined,\r\n    required: boolean | undefined,\r\n    params: GridPreProcessEditCellProps,\r\n    field: string\r\n  ) => {\r\n    removeError(params.id, field);\r\n\r\n    const requiredValidationResult =\r\n      required && !params.props.value && \"שדה חובה\";\r\n    const validationResult =\r\n      requiredValidationResult || (validation && validation(params));\r\n\r\n    const hasError = Boolean(validationResult);\r\n\r\n    if (hasError) {\r\n      addError(params.id, field, validationResult!);\r\n    }\r\n\r\n    return { ...params.props, error: hasError };\r\n  };\r\n\r\n  const parseColDefs = (columns: TableColDef[]) => {\r\n    return columns.map(({ validation, required, ...colDef }) => ({\r\n      ...(colDef.type &&\r\n        getGridDefsByColType(colDef.type as TableNativeColTypes)),\r\n      renderHeader: () =>\r\n        colDef.headerName &&\r\n        getFormattedHeaderName(colDef.headerName, required),\r\n      preProcessEditCellProps:\r\n        (required || validation) &&\r\n        ((params: GridPreProcessEditCellProps) =>\r\n          validateColumn(validation, required, params, colDef.field)),\r\n      ...colDef,\r\n    }));\r\n  };\r\n\r\n  const parsedColDefs = useMemo<GridColDef[]>(() => parseColDefs(columns), [\r\n    columns,\r\n  ]);\r\n\r\n  const handleRowEditStop = (params: GridRowEditStopParams) => {\r\n    params.reason === GridRowEditStopReasons.escapeKeyDown && clearRowErrors(params.id);\r\n  };\r\n\r\n  return (\r\n    <StyledBox sx={{ height: \"35%\", width: \"80%\" }}>\r\n      <TableRootPropsContext.Provider value={{ errors, getErrorsBy }}>\r\n        <DataGrid\r\n          rows={rows}\r\n          columns={parsedColDefs}\r\n          onRowEditStop={handleRowEditStop}\r\n          editMode=\"row\"\r\n          pageSizeOptions={[]}\r\n          density=\"compact\"\r\n          showColumnVerticalBorder\r\n          showCellVerticalBorder\r\n          hideFooterSelectedRowCount\r\n          localeText={heIL.components.MuiDataGrid.defaultProps.localeText}\r\n          slots={{\r\n            cell: TableCell,\r\n            ...slots,\r\n          }}\r\n          {...props}\r\n        />\r\n      </TableRootPropsContext.Provider>\r\n    </StyledBox>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import {\r\n  GridPreProcessEditCellProps,\r\n  GridValueGetterParams,\r\n} from \"@mui/x-data-grid\";\r\nimport { TableColDef } from \"../../Table/types\";\r\n\r\nconst validateAge = (params: GridPreProcessEditCellProps) => {\r\n  if (!params.props.value || params.props.value < 0) {\r\n    return \"לא להטריל\";\r\n  }\r\n};\r\n\r\nconst columns: TableColDef[] = [\r\n  { field: \"id\", headerName: \"מזהה\", width: 90, flex: 1 },\r\n  {\r\n    field: \"firstName\",\r\n    headerName: \"שם פרטי\",\r\n    headerAlign: \"left\",\r\n    width: 150,\r\n    flex: 1,\r\n    editable: true,\r\n    required: true,\r\n  },\r\n  {\r\n    field: \"lastName\",\r\n    headerName: \"שם משפחה\",\r\n    headerAlign: \"left\",\r\n    width: 150,\r\n    flex: 1,\r\n    editable: true,\r\n    required: true,\r\n  },\r\n  {\r\n    field: \"age\",\r\n    headerName: \"גיל\",\r\n    headerAlign: \"left\",\r\n    align: \"left\",\r\n    type: \"number\",\r\n    width: 110,\r\n    flex: 1,\r\n    editable: true,\r\n    required: true,\r\n    validation: validateAge,\r\n  },\r\n  {\r\n    field: \"fullName\",\r\n    headerName: \"שם מלא\",\r\n    headerAlign: \"left\",\r\n    description: \"This column has a value getter\",\r\n    width: 160,\r\n    flex: 1,\r\n    valueGetter: (params: GridValueGetterParams) =>\r\n      `${params.row.firstName || \"\"} ${params.row.lastName || \"\"}`,\r\n  },\r\n  {\r\n    field: \"date\",\r\n    headerName: \"תאריך\",\r\n    headerAlign: \"left\",\r\n    type: \"date\",\r\n    width: 160,\r\n    flex: 1,\r\n    editable: true,\r\n    required: true,\r\n  },\r\n  {\r\n    field: \"weight\",\r\n    headerName: \"משקל (שם תואר)\",\r\n    headerAlign: \"left\",\r\n    type: \"autocomplete\",\r\n    options: [\"שמן\", \"גדול\", \"שמנמן\"],\r\n    placeholder: \"תואר המשקל\",\r\n    width: 160,\r\n    flex: 1,\r\n    editable: true,\r\n    validation: (params: GridPreProcessEditCellProps) => {\r\n      if (!params.props.value) {\r\n        return \"חייב להזין ערך גדול ושמן במיוחד\";\r\n      }\r\n    },\r\n  },\r\n  {\r\n    field: \"isRolling\",\r\n    headerName: \"האם מתגלגל?\",\r\n    headerAlign: \"left\",\r\n    type: \"boolean\",\r\n    width: 160,\r\n    flex: 1,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: \"country\",\r\n    headerName: \"מדינה\",\r\n    headerAlign: \"left\",\r\n    type: \"singleSelect\",\r\n    width: 160,\r\n    flex: 1,\r\n    getOptionValue: (value: any) => value.id,\r\n    getOptionLabel: (value: any) => value.text,\r\n    valueOptions: [\r\n      { id: \"BR\", text: \"ברזיל\" },\r\n      { id: \"FR\", text: \"צרפת\" },\r\n    ],\r\n    editable: true,\r\n  },\r\n];\r\n\r\nexport { columns };\r\n","import React from \"react\";\r\nimport { Table } from \"../../Table\";\r\nimport { columns } from \"./ColumnDefinition\";\r\n\r\nconst rows = [\r\n  {\r\n    id: 1,\r\n    lastName: \"מצב\",\r\n    firstName: \"מה\",\r\n    age: 35,\r\n    country: \"BR\",\r\n    weight: \"שמן\",\r\n  },\r\n  { id: 2, lastName: \"הנמר\", firstName: \"אפי\", age: 42 },\r\n  { id: 3, lastName: \"אלעד\", firstName: \"אדיר\", age: 45, weight: \"שמנמן\" },\r\n  { id: 4, lastName: \"מאט\", firstName: \"שאזא\", age: 16 },\r\n  { id: 5, lastName: \"דודי\", firstName: \"דודי\", age: null, isRolling: true },\r\n  { id: 6, lastName: \"ללא תקנה\", firstName: null, age: 150 },\r\n];\r\n\r\nconst ExampleTable = () => {\r\n  return (\r\n    <>\r\n      <Table rows={rows} columns={columns} showColumnVerticalBorder={false} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExampleTable;\r\n","import React from \"react\";\r\nimport { CssBaseline, ThemeProvider, createTheme } from \"@mui/material\";\r\nimport { red } from \"@mui/material/colors\";\r\nimport { ExampleTable } from \"../Example\";\r\nimport \"../../styles/App.css\";\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n    primary: red,\r\n  },\r\n  typography: {\r\n    fontFamily: [\"Rubik\", \"Heebo\"].join(\",\"),\r\n    fontWeightMedium: \"normal\",\r\n    fontWeightRegular: \"lighter\",\r\n  },\r\n  direction: 'rtl'\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <ExampleTable />\r\n      </ThemeProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './styles/index.css';\r\nimport { App } from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(\r\n  document.getElementById('root') as HTMLElement\r\n);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}